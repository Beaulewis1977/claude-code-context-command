name: CI/CD - Security & Quality Gates

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test
  CI: true

jobs:
  # Security gates run first - everything depends on these passing
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'claude-code-context-command/scripts/package.json'

      - name: Install dependencies
        working-directory: ./claude-code-context-command/scripts
        run: npm ci

      - name: Run security test suite
        id: security-check
        working-directory: ./claude-code-context-command/scripts
        run: |
          echo "Running comprehensive security test suite..."
          npm test 2>&1 | tee security-results.txt
          
          # Check if tests passed
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "‚úÖ All security tests passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Security tests failed"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results-${{ github.run_id }}
          path: claude-code-context-command/scripts/security-results.txt
          retention-days: 30

  # Vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: security-gate
    if: needs.security-gate.outputs.security-passed == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'claude-code-context-command/scripts/package.json'

      - name: Install dependencies
        working-directory: ./claude-code-context-command/scripts
        run: npm ci

      - name: Run npm audit
        working-directory: ./claude-code-context-command/scripts
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=moderate || {
            echo "‚ùå npm audit found vulnerabilities"
            npm audit --audit-level=moderate --json > audit-results.json
            exit 1
          }

      - name: Run dependency check
        working-directory: ./claude-code-context-command/scripts
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          npm outdated || true
          echo "‚úÖ Dependency check completed"

  # Cross-platform testing matrix
  cross-platform-test:
    name: Test (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [security-gate, vulnerability-scan]
    if: needs.security-gate.outputs.security-passed == 'true'
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            node-version: 16.x
          - os: macos-latest
            node-version: 16.x

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'claude-code-context-command/scripts/package.json'

      - name: Install dependencies
        working-directory: ./claude-code-context-command/scripts
        run: npm ci

      - name: Run functional tests
        working-directory: ./claude-code-context-command/scripts
        run: |
          echo "üß™ Running functional tests on ${{ matrix.os }} with Node ${{ matrix.node-version }}"
          node context-analyzer.js summary || {
            echo "‚ùå Context analyzer failed"
            exit 1
          }
          
          node context-cmd.js compact || {
            echo "‚ùå Context command failed"
            exit 1
          }
          
          echo "‚úÖ Functional tests passed"

      - name: Test security module
        working-directory: ./claude-code-context-command
        run: |
          echo "üîê Testing security module..."
          node -e "
            const { InputValidator } = require('./lib/security.js');
            try {
              InputValidator.validateMode('compact');
              console.log('‚úÖ Security module working correctly');
            } catch (error) {
              console.error('‚ùå Security module test failed:', error);
              process.exit(1);
            }
          "

  # Installation script testing
  installer-test:
    name: Test Installers (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [security-gate, vulnerability-scan]
    if: needs.security-gate.outputs.security-passed == 'true'
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            installer: install.sh
            shell: bash
          - os: macos-latest
            installer: install.sh
            shell: bash
          - os: windows-latest
            installer: install.ps1
            shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test installer - Unix
        if: matrix.shell == 'bash'
        run: |
          echo "üîß Testing ${{ matrix.installer }} on ${{ matrix.os }}"
          chmod +x ./claude-code-context-command/installers/${{ matrix.installer }}
          
          # Create a temporary home directory for testing
          export TEST_HOME=$(mktemp -d)
          export HOME=$TEST_HOME
          
          # Run installer
          cd claude-code-context-command/installers
          ./${{ matrix.installer }} || {
            echo "‚ùå Installer failed"
            exit 1
          }
          
          # Verify installation
          if [ -f "$TEST_HOME/.claude/scripts/context-cmd.js" ]; then
            echo "‚úÖ Installation verified - files copied correctly"
          else
            echo "‚ùå Installation verification failed"
            ls -la "$TEST_HOME/.claude/" || echo "No .claude directory found"
            exit 1
          fi

      - name: Test installer - Windows
        if: matrix.shell == 'pwsh'
        shell: pwsh
        run: |
          Write-Host "üîß Testing ${{ matrix.installer }} on ${{ matrix.os }}"
          
          # Create temporary home directory
          $TestHome = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          $env:HOME = $TestHome.FullName
          $env:USERPROFILE = $TestHome.FullName
          
          # Run installer
          Set-Location claude-code-context-command/installers
          powershell -ExecutionPolicy Bypass -File ${{ matrix.installer }}
          if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå Installer failed"
            exit 1
          }
          
          # Verify installation
          $InstallPath = Join-Path $TestHome.FullName ".claude\scripts\context-cmd.js"
          if (Test-Path $InstallPath) {
            Write-Host "‚úÖ Installation verified - files copied correctly"
          } else {
            Write-Error "‚ùå Installation verification failed"
            Get-ChildItem (Join-Path $TestHome.FullName ".claude") -Recurse -ErrorAction SilentlyContinue
            exit 1
          }

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security-gate
    if: needs.security-gate.outputs.security-passed == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'claude-code-context-command/scripts/package.json'

      - name: Install dependencies
        working-directory: ./claude-code-context-command/scripts
        run: npm ci

      - name: Check JavaScript syntax
        run: |
          echo "üîç Checking JavaScript syntax..."
          find claude-code-context-command -name "*.js" -type f | while read file; do
            echo "Checking: $file"
            node -c "$file" || {
              echo "‚ùå Syntax error in $file"
              exit 1
            }
          done
          echo "‚úÖ All JavaScript files have valid syntax"

      - name: Check file structure
        run: |
          echo "üìÅ Verifying project structure..."
          
          # Check required files exist
          required_files=(
            "claude-code-context-command/README.md"
            "claude-code-context-command/scripts/context-cmd.js"
            "claude-code-context-command/scripts/context-analyzer.js"
            "claude-code-context-command/lib/security.js"
            "claude-code-context-command/tests/security.test.js"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All required files present"

      - name: Check security file permissions
        run: |
          echo "üîí Checking file permissions..."
          
          # Check that JavaScript files are not executable (security best practice)
          find claude-code-context-command -name "*.js" -type f -executable | while read file; do
            echo "‚ö†Ô∏è  JavaScript file should not be executable: $file"
          done
          
          # Check installer permissions
          if [ ! -x "claude-code-context-command/installers/install.sh" ]; then
            echo "‚ùå install.sh should be executable"
            exit 1
          fi
          
          echo "‚úÖ File permissions verified"

  # Final validation
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [cross-platform-test, installer-test, code-quality]
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'claude-code-context-command/scripts/package.json'

      - name: Install dependencies
        working-directory: ./claude-code-context-command/scripts
        run: npm ci

      - name: Run end-to-end test
        working-directory: ./claude-code-context-command
        run: |
          echo "üöÄ Running end-to-end integration test..."
          
          # Test the complete workflow
          cd scripts
          
          # Test different modes
          echo "Testing compact mode..."
          timeout 30 node context-cmd.js compact || {
            echo "‚ùå Compact mode failed"
            exit 1
          }
          
          echo "Testing standard mode..."
          timeout 30 node context-cmd.js standard || {
            echo "‚ùå Standard mode failed"  
            exit 1
          }
          
          echo "Testing detailed mode..."
          timeout 30 node context-cmd.js detailed || {
            echo "‚ùå Detailed mode failed"
            exit 1
          }
          
          echo "‚úÖ All integration tests passed"

  # Success notification
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security-gate, vulnerability-scan, cross-platform-test, installer-test, code-quality, integration-test]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ All CI/CD checks passed successfully!"
          echo "‚úÖ Security tests: PASSED"
          echo "‚úÖ Vulnerability scan: PASSED" 
          echo "‚úÖ Cross-platform tests: PASSED"
          echo "‚úÖ Installer tests: PASSED"
          echo "‚úÖ Code quality: PASSED"
          echo "‚úÖ Integration tests: PASSED"
          echo ""
          echo "üöÄ Ready for deployment!"