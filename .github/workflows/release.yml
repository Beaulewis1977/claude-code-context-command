name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: production

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # Pre-release validation
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and prerelease status
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if version contains pre-release indicators
            if echo "$VERSION" | grep -E "(alpha|beta|rc|dev)" > /dev/null; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "🏷️  Release version: $VERSION"
          echo "🔖 Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Remove 'v' prefix if present for validation
          CLEAN_VERSION=${VERSION#v}
          
          # Validate semantic version format
          if ! echo "$CLEAN_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or 1.2.3 (with optional pre-release and build metadata)"
            exit 1
          fi
          
          echo "✅ Version format is valid: $VERSION"

      - name: Check for existing release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if tag already exists (skip if triggered by tag push)
          if [ "${{ github.event_name }}" != "push" ] && git tag -l | grep -q "^$VERSION$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          
          # Check if release already exists on GitHub
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "❌ Release $VERSION already exists on GitHub"
            exit 1
          fi
          
          echo "✅ Version $VERSION is available for release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Run full test suite before release
  pre-release-tests:
    name: Pre-Release Testing
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'scripts/package.json'

      - name: Install dependencies
        working-directory: ./scripts
        run: npm ci

      - name: Run comprehensive test suite
        working-directory: ./scripts
        run: |
          echo "🧪 Running comprehensive test suite for release..."
          
          # Run security tests
          npm test 2>&1 | tee test-results.txt
          
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "❌ Tests failed - cannot proceed with release"
            exit 1
          fi
          
          echo "✅ All tests passed for release"

      - name: Validate installation scripts
        run: |
          echo "🔧 Validating installation scripts for release..."
          
          # Test syntax of shell scripts
          for script in installers/*.sh; do
            if [ -f "$script" ]; then
              bash -n "$script" || {
                echo "❌ Syntax error in $script"
                exit 1
              }
              echo "✅ $script syntax validated"
            fi
          done
          
          # Test PowerShell script syntax (basic check)
          if [ -f "installers/install.ps1" ]; then
            # Basic validation - check for common syntax issues
            if grep -E '^\s*\$.*=.*\|' installers/install.ps1; then
              echo "⚠️  Potential PowerShell syntax issue detected"
            fi
            echo "✅ PowerShell script basic validation completed"
          fi

  # Build release assets
  build-release-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests]
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'scripts/package.json'

      - name: Install dependencies
        working-directory: ./scripts
        run: npm ci --only=production

      - name: Create release package
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PACKAGE_NAME="claude-code-context-command-${VERSION}"
          
          echo "📦 Creating release package: $PACKAGE_NAME"
          
          # Create release directory
          mkdir -p release-assets
          
          # Create main package
          tar -czf "release-assets/${PACKAGE_NAME}.tar.gz" \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='release-assets' \
            --exclude='*.log' \
            ./
          
          # Create Windows package
          zip -r "release-assets/${PACKAGE_NAME}-windows.zip" \
            ./ \
            -x "*.git*" "*/node_modules/*" "release-assets/*" "*.log"
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..
          
          echo "✅ Release assets created successfully"
          ls -la release-assets/

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ needs.validate-release.outputs.version }}
          path: release-assets/
          retention-days: 30

  # Generate changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 10
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          echo "📋 Generating changelog for $VERSION..."
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "📅 Changes since $PREVIOUS_TAG:"
            
            # Generate commit log
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | head -20)
            
            # Add security and feature highlights
            SECURITY_COMMITS=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" --grep="security\|fix\|vulnerability" -i | head -10)
            FEATURE_COMMITS=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" --grep="feat\|feature\|add" -i | head -10)
            
            # Build formatted changelog
            FULL_CHANGELOG="## What's Changed in $VERSION

          ### 🔒 Security & Fixes
          ${SECURITY_COMMITS:-"- No specific security fixes in this release"}

          ### ✨ New Features & Improvements
          ${FEATURE_COMMITS:-"- No new features in this release"}

          ### 📋 All Changes
          $CHANGELOG

          **Full Commit History**: [$PREVIOUS_TAG...$VERSION](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION)"
          
          else
            FULL_CHANGELOG="## 🎉 Initial Release $VERSION

          This is the first release of the Claude Code Context Command tool.

          ### ✨ Features
          - Universal context analysis for Claude Code projects
          - Cross-platform support (Windows, macOS, Linux, WSL)
          - Security-first architecture with comprehensive testing
          - Multiple analysis modes (compact, standard, detailed)
          - Easy installation with automated scripts

          ### 🔒 Security
          - 25+ security test cases covering all major vulnerability types
          - Command injection prevention
          - Path traversal protection  
          - Input validation and sanitization
          - Secure file operations"
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Changelog generated successfully"

  # Create GitHub release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-assets, generate-changelog]
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets-${{ needs.validate-release.outputs.version }}
          path: release-assets/

      - name: Create GitHub release
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "🚀 Creating GitHub release: $VERSION"
          
          # Create changelog file to avoid shell parsing issues
          cat > changelog.md << 'CHANGELOG_EOF'
          ${{ needs.generate-changelog.outputs.changelog }}
          CHANGELOG_EOF
          
          # Prepare release command arguments
          RELEASE_ARGS=("$VERSION" release-assets/* --title "Claude Code Context Command $VERSION" --notes-file changelog.md)
          
          # Add prerelease flag if needed
          if [ "$IS_PRERELEASE" = "true" ]; then
            RELEASE_ARGS+=(--prerelease)
            echo "🔖 Creating pre-release"
          else
            echo "📢 Creating stable release"
          fi
          
          # Create the release
          gh release create "${RELEASE_ARGS[@]}"
          
          echo "✅ GitHub release created successfully"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # NPM package publishing (if applicable)
  publish-npm:
    name: Publish NPM Package
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: success() && needs.validate-release.outputs.is-prerelease == 'false'
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'npm/package.json'

      - name: Prepare NPM package
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          CLEAN_VERSION=${VERSION#v}  # Remove 'v' prefix
          
          echo "📦 Preparing NPM package version $CLEAN_VERSION"
          
          # Check if NPM package configuration exists
          if [ -f "npm/package.json" ]; then
            cd npm
            
            # Update version in package.json
            npm version "$CLEAN_VERSION" --no-git-tag-version
            
            echo "✅ NPM package prepared for publication"
            cat package.json | grep version
          else
            echo "⚠️  No NPM package configuration found, skipping NPM publish"
            exit 0
          fi

      - name: Publish to NPM
        if: success()
        working-directory: ./npm
        run: |
          echo "🚀 Publishing to NPM..."
          
          # Dry run first
          npm publish --dry-run
          
          if [ $? -eq 0 ]; then
            # Actual publish
            npm publish
            echo "✅ NPM package published successfully"
          else
            echo "❌ NPM dry run failed"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Release notification and cleanup
  release-complete:
    name: Release Complete
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, publish-npm]
    if: always()
    
    steps:
      - name: Release status notification
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "🎉 Release $VERSION completed!"
          echo ""
          echo "📊 Release Summary:"
          echo "- Version: $VERSION"
          echo "- Pre-release: $IS_PRERELEASE"
          echo "- GitHub Release: ${{ needs.create-github-release.result }}"
          echo "- NPM Publish: ${{ needs.publish-npm.result }}"
          echo ""
          
          if [[ "${{ needs.create-github-release.result }}" == "success" ]]; then
            echo "✅ GitHub release created successfully"
            echo "🔗 https://github.com/${{ github.repository }}/releases/tag/$VERSION"
          else
            echo "❌ GitHub release failed"
          fi
          
          if [[ "${{ needs.publish-npm.result }}" == "success" ]]; then
            echo "✅ NPM package published successfully"
          elif [[ "${{ needs.publish-npm.result }}" == "skipped" ]]; then
            echo "⏭️  NPM publish skipped (pre-release or not configured)"
          else
            echo "❌ NPM publish failed"
          fi
          
          echo ""
          echo "🚀 Release process completed!"